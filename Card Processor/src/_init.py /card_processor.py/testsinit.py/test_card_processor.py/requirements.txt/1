class CardProcessor:
    def process_card(self, card_number: str, cvv: str, expiration: str) -> dict:
        """Process card details and return results"""
        # Clean input
        card_number = card_number.replace(" ", "")
        
        # Validate inputs
        if not self._validate_card(card_number):
            raise ValueError("Invalid card number")
        if not self._validate_cvv(cvv):
            raise ValueError("Invalid CVV")
        if not self._validate_expiration(expiration):
            raise ValueError("Invalid expiration date")
            
        # Calculate sum
        total = self._calculate_sum(card_number)
        result = total * 3
        
        return {
            "sum": total,
            "result": result,
            "cvv": cvv,
            "expiration": expiration
        }
    
    def _validate_card(self, number: str) -> bool:
        return len(number) == 16 and number.isdigit()
    
    def _validate_cvv(self, cvv: str) -> bool:
        return len(cvv) == 3 and cvv.isdigit()
    
    def _validate_expiration(self, exp_date: str) -> bool:
        if len(exp_date) != 5 or exp_date[2] != '/':
            return False
        month, year = exp_date.split('/')
        return month.isdigit() and year.isdigit()
    
    def _calculate_sum(self, number: str) -> int:
        total = 0
        for i, digit in enumerate(reversed(number)):
            digit = int(digit)
            if i % 2 == 1:
                doubled = digit * 2
                total += doubled if doubled < 10 else doubled - 9
            else:
                total += digit
        return total

def main():
    processor = CardProcessor()
    print("Card Number Processor")
    
    while True:
        try:
            card_number = input("Enter 16-digit number (or 'q' to quit): ")
            if card_number.lower() == 'q':
                break
                
            cvv = input("Enter 3-digit CVV: ")
            expiration = input("Enter expiration date (MM/YY): ")
            
            result = processor.process_card(card_number, cvv, expiration)
            
            print(f"\nResults:")
            print(f"Sum: {result['sum']}")
            print(f"Result (sum Ã— 3): {result['result']}")
            print(f"CVV: {result['cvv']}")
            print(f"Expiration: {result['expiration']}\n")
            
        except ValueError as e:
            print(f"Error: {e}")
        except Exception as e:
            print("An error occurred. Please try again.")

if __name__ == "__main__":
    main()
    
